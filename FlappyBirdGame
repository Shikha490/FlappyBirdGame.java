import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.*;

public class FlappyBirdGame extends JPanel implements ActionListener, KeyListener {

    // Game Dimensions
    private final int WIDTH = 400, HEIGHT = 600;

    // Bird Attributes
    private int birdX = 100, birdY = HEIGHT / 2;
    private int birdWidth = 20, birdHeight = 20;
    private int birdVelocity = 0;
    private final int gravity = 1;

    // Pipes Attributes
    private ArrayList<Rectangle> pipes = new ArrayList<>();
    private final int pipeWidth = 60, pipeGap = 150;
    private int pipeSpeed = 5;

    // Game States
    private boolean gameActive = true;
    private Timer timer;

    public FlappyBirdGame() {
        // Setup JFrame
        JFrame frame = new JFrame("Flappy Bird");
        frame.setSize(WIDTH, HEIGHT);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.add(this);
        frame.addKeyListener(this);
        frame.setResizable(false);
        frame.setVisible(true);

        // Timer for game loop
        timer = new Timer(20, this);
        timer.start();

        // Add initial pipes
        spawnPipe();
    }

    // Spawn a new pair of pipes
    private void spawnPipe() {
        Random random = new Random();
        int height = 100 + random.nextInt(200);
        pipes.add(new Rectangle(WIDTH, 0, pipeWidth, height));
        pipes.add(new Rectangle(WIDTH, height + pipeGap, pipeWidth, HEIGHT - height - pipeGap));
    }

    // Move pipes to the left and remove off-screen pipes
    private void movePipes() {
        ArrayList<Rectangle> toRemove = new ArrayList<>();
        for (Rectangle pipe : pipes) {
            pipe.x -= pipeSpeed;
            if (pipe.x + pipeWidth < 0) {
                toRemove.add(pipe);
            }
        }
        pipes.removeAll(toRemove);

        if (pipes.isEmpty() || pipes.get(pipes.size() - 1).x < WIDTH - 200) {
            spawnPipe();
        }
    }

    // Check for collisions
    private boolean checkCollision() {
        Rectangle bird = new Rectangle(birdX, birdY, birdWidth, birdHeight);
        for (Rectangle pipe : pipes) {
            if (bird.intersects(pipe)) {
                return true;
            }
        }
        return birdY < 0 || birdY + birdHeight > HEIGHT;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (gameActive) {
            // Bird physics
            birdVelocity += gravity;
            birdY += birdVelocity;

            // Pipe movement
            movePipes();

            // Check for collision
            if (checkCollision()) {
                gameActive = false;
                timer.stop();
            }
        }
        repaint();
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);

        // Background
        g.setColor(Color.CYAN);
        g.fillRect(0, 0, WIDTH, HEIGHT);

        // Bird
        g.setColor(Color.RED);
        g.fillRect(birdX, birdY, birdWidth, birdHeight);

        // Pipes
        g.setColor(Color.GREEN);
        for (Rectangle pipe : pipes) {
            g.fillRect(pipe.x, pipe.y, pipe.width, pipe.height);
        }

        // Game Over message
        if (!gameActive) {
            g.setColor(Color.BLACK);
            g.setFont(new Font("Arial", Font.BOLD, 36));
            g.drawString("Game Over", WIDTH / 4, HEIGHT / 2);
        }
    }

    @Override
    public void keyPressed(KeyEvent e) {
        if (e.getKeyCode() == KeyEvent.VK_SPACE) {
            if (gameActive) {
                birdVelocity = -10; // Jump
            } else {
                // Restart game on Game Over
                restartGame();
            }
        }
    }

    private void restartGame() {
        birdY = HEIGHT / 2;
        birdVelocity = 0;
        pipes.clear();
        spawnPipe();
        gameActive = true;
        timer.start();
    }

    @Override
    public void keyReleased(KeyEvent e) {}
    @Override
    public void keyTyped(KeyEvent e) {}

    public static void main(String[] args) {
        new FlappyBirdGame();
    }
}
